// controllers/store.controller.js
import prisma from '../config/prisma.config.js';
import cloudinary from '../config/cloudinary.config.js';
import fs from 'fs/promises';


/* ----------------------------- helpers ----------------------------- */
function toIntOrNull(v) {
  if (v === undefined || v === null || v === '') return null;
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
}
function toBoolOrNull(v) {
  if (v === undefined || v === null || v === '') return null;
  const s = String(v).trim().toLowerCase();
  if (['true','1','yes','on'].includes(s)) return true;
  if (['false','0','no','off'].includes(s)) return false;
  return null;
}

async function nextOrderInCategory(categoryId) {
  const max = await prisma.store.aggregate({
    where: { category_id: categoryId },
    _max: { order_number: true },
  });
  return (max._max.order_number || 0) + 1;
}

function safeNewDate(input) {
  if (!input) return null;
  const d = new Date(input);
  return Number.isNaN(+d) ? null : d;
}
function slugify(input) {
  return String(input)
    .trim()
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9‡∏Å-‡πô\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

async function getAvailableStoreSlug(baseName) {
  const base = slugify(baseName);
  if (!base) return String(Date.now());

  // ‡∏î‡∏∂‡∏á slug ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ base ‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ
  const existing = await prisma.store.findMany({
    where: { slug: { startsWith: base } },
    select: { slug: true },
  });
  const taken = new Set(existing.map(r => r.slug));

  if (!taken.has(base)) return base;

  for (let i = 2; i <= 200; i++) {
    const candidate = `${base}-${i}`;
    if (!taken.has(candidate)) return candidate;
  }
  return `${base}-${Date.now()}`;
}
/* ============================= CREATE ============================== */
export const createStore = async (req, res, next) => {
  try {
    const {
      name,
      description = '',
      address = '',
      province,
      category_id,
      social_links = '',
      order_number,
      expired_at,
    } = req.body;

    if (!name || !category_id) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });
    }

    // ‚ù∂ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏≥‡∏î‡∏±‡∏ö
    let desiredOrder = Number(order_number);
    if (!Number.isInteger(desiredOrder) || desiredOrder <= 0) {
      const max = await prisma.store.aggregate({
        where: { category_id },
        _max: { order_number: true },
      });
      desiredOrder = (max._max.order_number || 0) + 1;
    } else {
      const existing = await prisma.store.findFirst({
        where: { category_id, order_number: desiredOrder },
      });
      if (existing) {
        return res.status(400).json({
          message: `‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${desiredOrder} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà`,
        });
      }
    }

    // ‚ù∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î cover
    let coverImageUrl = null;
    if (req.files?.cover?.length > 0) {
      const coverResult = await cloudinary.uploader.upload(req.files.cover[0].path, {
        folder: 'store-covers',
      });
      coverImageUrl = coverResult.secure_url;
      await fs.unlink(req.files.cover[0].path);
    }

    // ‚ù∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° slug ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
const slug = await getAvailableStoreSlug(name);

// (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡πÅ‡∏õ‡∏•‡∏á social_links ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON string
let socialLinksVal = undefined;
if (social_links !== undefined && social_links !== null && social_links !== '') {
  try {
    socialLinksVal = typeof social_links === 'string' ? JSON.parse(social_links) : social_links;
  } catch {
    // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πá‡∏¢‡∏±‡∏á valid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prisma JSON
    socialLinksVal = social_links;
  }
}

const store = await prisma.store.create({
  data: {
    name,
    slug, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    description,
    address,
    province,
    social_links: socialLinksVal,
    category_id,
    order_number: desiredOrder,
    cover_image: coverImageUrl,
    expired_at: expired_at ? new Date(expired_at) : null,
    is_active: true,
  },
  select: { id: true },
});

    // ‚ùπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏° (images[] + orders[])
    let orders = [];
    if (req.body.orders) {
      if (Array.isArray(req.body.orders)) {
        orders = req.body.orders.map((o) => Number(o));
      } else {
        const single = Number(req.body.orders);
        if (!isNaN(single)) orders = [single];
      }
    }

    const uploadedImages = await Promise.all(
      (req.files?.images || []).map(async (file, index) => {
        const result = await cloudinary.uploader.upload(file.path, {
          folder: 'store-images',
        });
        await fs.unlink(file.path);
        const order = orders[index] || index + 1;
        return {
          image_url: result.secure_url,
          order_number: order,
          alt_text: `‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${order}`,
        };
      })
    );

    if (uploadedImages.length > 0) {
      await prisma.store.update({
        where: { id: store.id },
        data: { images: { create: uploadedImages } },
      });
    }

    // ‚ù∫ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
    const storeWithImages = await prisma.store.findUnique({
      where: { id: store.id },
      include: { images: true, category: true },
    });

    res.status(201).json({
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      store: storeWithImages,
    });
  } catch (err) {
    console.error('üî• CREATE STORE ERROR:', err);
    next(err);
  }
};

/* ============================ READ (ALL) =========================== */
export const getAllStores = async (req, res, next) => {
  try {
    const { select, limit = 1000, q } = req.query;

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ ‡πÜ
    const where = q
      ? { name: { contains: String(q), mode: 'insensitive' } }
      : {};

    // ‚¨áÔ∏è ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ö‡∏ö basic ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà { items: [{id,name}, ...] }
    if (String(select) === 'basic') {
      const items = await prisma.store.findMany({
        where,
        orderBy: { created_at: 'desc' },
        take: Number(limit) || 1000,
        select: { id: true, name: true },
      });
      return res.json({ items });
    }

    // ‚¨áÔ∏è ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏ï‡πà‡πÉ‡∏™‡πà‡∏ó‡∏±‡πâ‡∏á keys: items ‡πÅ‡∏•‡∏∞ stores ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ï‡∏Å)
    const stores = await prisma.store.findMany({
      where,
      orderBy: [
        { category_id: 'asc' },
        { order_number: 'asc' },
        { created_at: 'desc' },
      ],
      select: {
        id: true,
        name: true,
        address: true,
         province: true,
        description: true,
        social_links: true,
        category_id: true,
        is_active: true,
        order_number: true,
        created_at: true,
        updated_at: true,
        expired_at: true,
        cover_image: true,
        category: true,
        images: true,
        reviews: true,
        visitorCounter: true,
        renewal_count: true,
      },
    });

    const mapped = stores.map((s) => ({ ...s, renew_count: s.renewal_count }));

    // ‡πÉ‡∏™‡πà‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå: FE ‡∏ö‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ä‡πâ stores, ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ items
    res.json({ items: mapped, stores: mapped });
  } catch (err) {
    next(err);
  }
};
/* ============================ READ (ONE) =========================== */
export const getStoreById = async (req, res, next) => {
  try {
    const { id } = req.params;
    const store = await prisma.store.findUnique({
      where: { id },
      select: {
        id: true,
        name: true,
        address: true,
        description: true,
        social_links: true,
        category_id: true,
        order_number: true,
        cover_image: true,
        created_at: true,
        updated_at: true,
        expired_at: true,
        is_active: true,
        category: true,
        images: true,
        renewal_count: true,
        reviews: {
          include: { user: { select: { id: true, name: true } } },
        },
        visitorCounter: true,
      },
    });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    res.json({ ...store, renew_count: store.renewal_count });
  } catch (err) {
    next(err);
  }
};

/* ============================== UPDATE ============================ */
export const updateStore = async (req, res, next) => {
  try {
    const { id } = req.params;

    const {
      name,
      description,
      address,
      province,
      social_links,
      category_id,
      existing_image_orders = [],
      order_number,
      expired_at,
      is_active,
    } = req.body;

    if (category_id) {
      const categoryExists = await prisma.category.findUnique({ where: { id: category_id } });
      if (!categoryExists) return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö category ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
    }

    // re-order images (optional)
    const parsedOrders = Array.isArray(existing_image_orders)
      ? existing_image_orders.map((o) => (typeof o === 'string' ? JSON.parse(o) : o))
      : [typeof existing_image_orders === 'string' ? JSON.parse(existing_image_orders) : existing_image_orders];

    if (parsedOrders.filter(Boolean).length > 0) {
      const uniqueOrderNumbers = new Set(parsedOrders.map((o) => `${o.order_number}`));
      if (uniqueOrderNumbers.size !== parsedOrders.length) {
        return res.status(400).json({ message: '‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
      }
    }

    // cover ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let coverImageUrl = null;
    if (req.files?.cover?.length > 0) {
      const result = await cloudinary.uploader.upload(req.files.cover[0].path, {
        folder: 'store-covers',
      });
      coverImageUrl = result.secure_url;
      await fs.unlink(req.files.cover[0].path);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à order_number ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤
    const newOrder = toIntOrNull(order_number);
    if (newOrder !== null) {
      const current = await prisma.store.findUnique({
        where: { id },
        select: { category_id: true, order_number: true },
      });
      const catId = category_id || current?.category_id;
      if (!catId) return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô' });

      const conflict = await prisma.store.findFirst({
        where: { category_id: catId, order_number: newOrder, id: { not: id } },
        select: { id: true },
      });
      if (conflict) {
        return res.status(400).json({ message: `‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö ${newOrder} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß` });
      }
    }

    /* ================== ‚¨á‚¨á‚¨á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ (‡πÅ‡∏Ñ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ‚¨á‚¨á‚¨á ================== */
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ï‡πà "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á" order_number ‚Üí ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
    // ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô
    let __effectiveOrderToApply = null;
    try {
      const currentStore = await prisma.store.findUnique({
        where: { id },
        select: { category_id: true, order_number: true },
      });

      const targetCatId = category_id || currentStore?.category_id;

      if (category_id && newOrder === null) {
        __effectiveOrderToApply = currentStore?.order_number ?? null;
      }

      if (targetCatId && __effectiveOrderToApply !== null) {
        const conflict2 = await prisma.store.findFirst({
          where: {
            category_id: targetCatId,
            order_number: __effectiveOrderToApply,
            id: { not: id },
          },
          select: { id: true },
        });
        if (conflict2) {
          return res.status(400).json({
            message: `‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö ${__effectiveOrderToApply} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`,
          });
        }
      }
    } catch {}
    /* ================== ‚¨Ü‚¨Ü‚¨Ü ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ (‡πÅ‡∏Ñ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ‚¨Ü‚¨Ü‚¨Ü ================== */

    await prisma.$transaction(async (tx) => {
      // 1) ‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏π‡∏õ (best-effort)
      if (parsedOrders.filter(Boolean).length > 0) {
        for (const { id: imageId } of parsedOrders) {
          try {
            await tx.image.update({
              where: { id: imageId },
              data: { order_number: -(Math.floor(Math.random() * 10000 + 1)) },
            });
          } catch {}
        }
        for (const { id: imageId, order_number: ord } of parsedOrders) {
          try {
            await tx.image.update({
              where: { id: imageId },
              data: { order_number: Number(ord) },
            });
          } catch {}
        }
      }

      // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const data = {};
      if (name !== undefined && name !== '') {
  const current = await prisma.store.findUnique({
    where: { id },
    select: { name: true },
  });
  if (current && String(current.name).trim() !== String(name).trim()) {
    const newSlug = await getAvailableStoreSlug(name);
    data.slug = newSlug; // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö slug ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  }
  data.name = name;
}
      if (description !== undefined) data.description = description;
      if (address !== undefined) data.address = address;
      // ‚úÖ parse ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô createStore)
if (social_links !== undefined) {
  let socialLinksVal = social_links;
  try {
    if (typeof social_links === 'string' && social_links.trim() !== '') {
      socialLinksVal = JSON.parse(social_links);
    }
  } catch {
    // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (string) ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
  }
  data.social_links = socialLinksVal;
}
      if (category_id) data.category_id = category_id;
      if (coverImageUrl) data.cover_image = coverImageUrl;
      if (newOrder !== null) data.order_number = newOrder;
      if (expired_at !== undefined) {
        data.expired_at = expired_at ? new Date(expired_at) : null;
      }

      // ‚¨á‚¨á‚¨á ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á order_number
      if (newOrder === null && __effectiveOrderToApply !== null) {
        data.order_number = __effectiveOrderToApply;
      }

      // ‚¨á‚¨á‚¨á ‡πÄ‡∏û‡∏¥‡πà‡∏°: parse is_active ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤
      const activeParsed = toBoolOrNull(is_active);
      if (activeParsed !== null) data.is_active = activeParsed;
      if (province !== undefined) data.province = province;
      if (Object.keys(data).length > 0) {
        await tx.store.update({ where: { id }, data });
      }
    });

    // 3) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)
    if (req.files?.images?.length > 0) {
      const maxOrder = await prisma.image.aggregate({
        where: { store_id: id },
        _max: { order_number: true },
      });

      let nextOrder = (maxOrder._max.order_number || 0) + 1;

      const newImages = await Promise.all(
        req.files.images.map(async (file) => {
          const result = await cloudinary.uploader.upload(file.path, { folder: 'store-images' });
          await fs.unlink(file.path);
          return {
            image_url: result.secure_url,
            order_number: nextOrder++,
            alt_text: '‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà',
          };
        })
      );

      await prisma.store.update({
        where: { id },
        data: { images: { create: newImages } },
      });
    }

    const updatedStore = await prisma.store.findUnique({
      where: { id },
      include: { images: true },
    });

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', store: updatedStore });
  } catch (err) {
    next(err);
  }
};

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏á ‡πÜ (‡∏£‡∏±‡∏ö JSON ‡∏´‡∏£‡∏∑‡∏≠ multipart ‡∏Å‡πá‡πÑ‡∏î‡πâ)
export const setStoreStatus = async (req, res, next) => {
  try {
    const { id } = req.params;
    const desired = toBoolOrNull(req.body?.is_active);
    if (desired === null) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á is_active ‡πÄ‡∏õ‡πá‡∏ô true/false' });
    }
    const updated = await prisma.store.update({
      where: { id },
      data: { is_active: desired },
      include: { images: true, category: true },
    });
    return res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', store: updated });
  } catch (err) {
    next(err);
  }
};

// ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const enableStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    const store = await prisma.store.update({
      where: { id },
      data: { is_active: true },
      include: { images: true, category: true },
    });
    return res.json({ message: '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß', store });
  } catch (err) {
    next(err);
  }
};

// ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const disableStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    const store = await prisma.store.update({
      where: { id },
      data: { is_active: false },
      include: { images: true, category: true },
    });
    return res.json({ message: '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß', store });
  } catch (err) {
    next(err);
  }
};

/* ============================== DELETE ============================ */
export const deleteStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    await prisma.store.delete({ where: { id } });
    res.json({ message: '‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    next(err);
  }
};

/* =========================== UPLOAD IMAGES ======================== */
export const uploadImages = async (req, res, next) => {
  try {
    const { id } = req.params;
    const files = req.files;
    if (!files?.length) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ' });
    }

    const maxOrder = await prisma.image.aggregate({
      where: { store_id: id },
      _max: { order_number: true },
    });
    let nextOrder = (maxOrder._max.order_number || 0) + 1;

    const images = await Promise.all(
      files.map(async (file) => {
        const result = await cloudinary.uploader.upload(file.path, { folder: 'store-images' });
        await fs.unlink(file.path);
        return {
          image_url: result.secure_url,
          order_number: nextOrder++,
          alt_text: '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà',
        };
      })
    );

    const updated = await prisma.store.update({
      where: { id },
      data: { images: { create: images } },
      include: { images: true },
    });

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', images: updated.images, store: updated });
  } catch (err) {
    next(err);
  }
};

/* ============================== SEARCH =========================== */
export const searchStore = async (req, res, next) => {
  try {
    let { q } = req.query;
    if (!q) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ?q=‡∏≠‡∏≤‡∏´‡∏≤‡∏£' });

    q = String(q).trim().toLowerCase();

    const stores = await prisma.store.findMany({
      include: { category: true, images: true, reviews: true },
      orderBy: { created_at: 'desc' },
    });

    const filtered = stores.filter((store) => {
      const nameMatch = store.name?.toLowerCase().includes(q);
      const descMatch = store.description?.toLowerCase().includes(q);
      const categoryMatch = store.category?.name?.toLowerCase().includes(q);
      return nameMatch || descMatch || categoryMatch;
    });

    res.json({ stores: filtered });
  } catch (err) {
    next(err);
  }
};

/* ============================ DELETE IMAGE ======================== */
export const deleteStoreImage = async (req, res, next) => {
  try {
    const { imageId } = req.params;
    const image = await prisma.image.findUnique({ where: { id: imageId } });
    if (!image) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });

    try {
      const urlParts = image.image_url.split('/');
      const publicId = urlParts.slice(-2).join('/').replace(/\.[^/.]+$/, '');
      await cloudinary.uploader.destroy(publicId);
    } catch {}

    await prisma.image.delete({ where: { id: imageId } });
    res.json({ message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    next(err);
  }
};

/* ========================= UPDATE STORE ORDER ===================== */
export const updateStoreOrder = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { category_id, order_number } = req.body;

    if (!category_id || order_number === undefined || order_number === null) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ category_id ‡πÅ‡∏•‡∏∞ order_number' });
    }

    const store = await prisma.store.findUnique({ where: { id } });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const newOrder = Number(order_number);
    const targetStore = await prisma.store.findFirst({
      where: { category_id, order_number: newOrder, id: { not: id } },
    });

    await prisma.$transaction(async (tx) => {
      if (targetStore) {
        await tx.store.update({ where: { id: targetStore.id }, data: { order_number: -1 } });
      }

      await tx.store.update({ where: { id }, data: { order_number: newOrder } });

      if (targetStore) {
        await tx.store.update({ where: { id: targetStore.id }, data: { order_number: store.order_number } });
      }
    });

    res.json({ message: '‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (err) {
    console.error('üî• updateStoreOrder error:', err);
    if (err.code === 'P2002') {
      return res.status(400).json({
        message: '‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà',
      });
    }
    next(err);
  }
};

/* ======================= RENEW ===================== */
// ‚úÖ ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞ +1 ‡∏ó‡∏µ‡πà renewal_count (DB) + alias ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô renew_count (API)
export const renewStore = async (req, res, next) => {
  try {
    const { id } = req.params;

    // months ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á string/number
    const monthsRaw = req.body?.months;
    const months = Number(monthsRaw);
    if (!id) return res.status(400).json({ message: 'Missing store id' });
    if (!Number.isFinite(months) || months <= 0) {
      return res.status(400).json({ message: 'months must be a positive number' });
    }

    const store = await prisma.store.findUnique({ where: { id } });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const now = new Date();
    const exp = safeNewDate(store.expired_at);
    const base = exp && exp > now ? exp : now;

    let nextExpire = new Date(base);
    if (months >= 600) {
      nextExpire.setFullYear(nextExpire.getFullYear() + 100); // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ lifetime
    } else {
      nextExpire.setMonth(nextExpire.getMonth() + months);
    }

    const updated = await prisma.store.update({
      where: { id },
      data: {
        expired_at: nextExpire,
        is_active: true,
        renewal_count: { increment: 1 },
      },
      select: {
        id: true,
        name: true,
        expired_at: true,
        is_active: true,
        renewal_count: true,
      },
    });

    return res.json({
      message: '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      store: {
        ...updated,
        renew_count: updated.renewal_count, // alias ‡πÉ‡∏´‡πâ FE ‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢
      },
    });
  } catch (err) {
    console.error('üî• RENEW STORE ERROR:', err);
    next(err);
  }
};

/* ======================= REPORTS / STATS ===================== */
export const getPopularStores = async (_req, res, next) => {
  try {
    const stores = await prisma.store.findMany({
      include: { category: true, images: true, reviews: true },
    });

    const withAvgRating = stores
      .map((store) => {
        const total = store.reviews.length;
        const avg = total > 0 ? store.reviews.reduce((s, r) => s + r.rating, 0) / total : 0;
        return { ...store, avg_rating: avg };
      })
      .filter((s) => s.avg_rating >= 4.0) // 4.0+
      .sort((a, b) => b.avg_rating - a.avg_rating);

    res.json({ stores: withAvgRating });
  } catch (err) {
    next(err);
  }
};

export const updateStoreCover = async (req, res, next) => {
  try {
    const { id } = req.params;

    if (!req.file) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡πÉ‡∏´‡∏°‡πà' });
    }

    const result = await cloudinary.uploader.upload(req.file.path, { folder: 'store-covers' });
    await fs.unlink(req.file.path);

    const updated = await prisma.store.update({
      where: { id },
      data: { cover_image: result.secure_url },
    });

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', store: updated });
  } catch (err) {
    console.error('üî• updateStoreCover error:', err);
    next(err);
  }
};

export const getExpiringSoonStores = async (_req, res, next) => {
  try {
    const now = new Date();
    const next30Days = new Date();
    next30Days.setDate(now.getDate() + 30);

    const expiringStores = await prisma.store.findMany({
      where: {
        expired_at: { gte: now, lte: next30Days },
        is_active: true,
      },
      select: {
        id: true,
        name: true,
        expired_at: true,
        category: { select: { name: true } },
      },
    });

    res.json({ stores: expiringStores });
  } catch (err) {
    next(err);
  }
};

// ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏á‡πÜ (+1 renewal_count ‡πÅ‡∏•‡πâ‡∏ß map ‡∏Å‡∏•‡∏±‡∏ö)
export const reactivateStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { new_expired_at } = req.body;

    if (!new_expired_at) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà' });
    }

    const store = await prisma.store.findUnique({ where: { id } });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const updated = await prisma.store.update({
      where: { id },
      data: {
        is_active: true,
        expired_at: new Date(new_expired_at),
        renewal_count: { increment: 1 },
      },
      select: {
        id: true,
        name: true,
        expired_at: true,
        is_active: true,
        renewal_count: true,
      },
    });

    res.json({
      message: '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      store: {
        ...updated,
        renew_count: updated.renewal_count,
      },
    });
  } catch (err) {
    next(err);
  }
};

export const getExpiredStores = async (req, res, next) => {
  try {
    const now = new Date();
    const onlyInactive = String(req.query.onlyInactive || '').toLowerCase() === 'true';

    const where = onlyInactive
      ? { expired_at: { lte: now }, is_active: false }
      : { expired_at: { lte: now } };

    const expiredStores = await prisma.store.findMany({
      where,
      select: {
        id: true,
        name: true,
        expired_at: true,
        category: { select: { name: true } },
        renewal_count: true,
      },
    });

    res.json({
      stores: expiredStores.map(s => ({ ...s, renew_count: s.renewal_count })),
    });
  } catch (err) {
    next(err);
  }
};

export const getStoreLoyaltyStats = async (_req, res, next) => {
  try {
    const stores = await prisma.store.findMany({
      select: { id: true, name: true, created_at: true, renewal_count: true },
    });

    const now = new Date();
    const data = stores.map((store) => {
      const diffYears = (now - store.created_at) / (1000 * 60 * 60 * 24 * 365.25);
      return {
        id: store.id,
        name: store.name,
        created_at: store.created_at,
        renew_count: store.renewal_count, // map ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà FE ‡πÉ‡∏ä‡πâ
        years_with_us: parseFloat(diffYears.toFixed(1)),
      };
    });

    res.json({ stores: data });
  } catch (err) {
    next(err);
  }
};